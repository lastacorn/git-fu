# CMake build script for the git-fu project
#
# Building (out of source build):
# > mkdir _build && cd _build
# > cmake ..
# > cmake --build .

# -------- git-fu project information --------
PROJECT(git-fu)
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
SET (gitfu_VERSION_MAJOR 0)
SET (gitfu_VERSION_MINOR 0)
SET (gitfu_VERSION_REV   1)
SET (gitfu_VERSION_STRING "${gitfu_VERSION_MAJOR}.${gitfu_VERSION_MINOR}.${gitfu_VERSION_REV}")

# Put all exe & dll into the bin folder so they'll easily find eachother at runtime
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all Libraries")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single Directory for all Executables.")
#SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/Bin CACHE PATH "Single Directory for all static libraries.")

CONFIGURE_FILE(
	"${PROJECT_SOURCE_DIR}/gitfu-version.in.h"
	"${PROJECT_BINARY_DIR}/gitfu-version.h"
	)

# -------- libgit2 --------
# TODO: Sure would be nice if we could just build and install the libgit2 stuff to our
# output directory instead of poking inside of it...Use FIND_PACKAGE(libgit2 REQUIRED) if possible?
#FIND_PACKAGE(libgit2 REQUIRED PATHS ${PROJECT_BINARY_DIR}/submodules/libgit2)
#INCLUDE_DIRECTORIES(LIBGIT2_INCLUDE_DIRS)
#SET(DEPENDANCY_LIBS ${DEPENDANCY_LIBS} ${LIBGIT2_LIBRARIES})

# Disable unwanted libgit2 options and include it.
SET(BUILD_CLAR OFF CACHE BOOL "Force disable of libgit2's CLAR testing")
#SET(STDCALL OFF CACHE BOOL "Don't use stdcall calling convention since libgit2 doesn't properly export the symbols as such")
ADD_SUBDIRECTORY(submodules/libgit2)
MESSAGE(STATUS "Added submodules/libgit2. bin:${libgit2_BINARY_DIR} src:${libgit2_SOURCE_DIR}")
INCLUDE_DIRECTORIES(${libgit2_SOURCE_DIR}/include)
LINK_DIRECTORIES(${libgit2_BINARY_DIR})
SET(DEPENDANCY_LIBS ${DEPENDANCY_LIBS} git2)

# DEBUG: Dump all properties
# GET_CMAKE_PROPERTY(_variableNames VARIABLES)
# FOREACH(_variableName ${_variableNames})
    # MESSAGE(STATUS "\t${_variableName}=${${_variableName}}")
# ENDFOREACH()

# -------- libgit2 --------
# TODO: This isn't portable. I suspect the /Debug being appended is a VS only type thing...not sure how to deal with it.
# Maybe I'll need to install and use the install info? Or maybe there are arguments I can pass in to CMAKE to override
# the location it will get saved instead of needing the post-build copy step.
# INCLUDE(ExternalProject)
# SET(libgit2_DIR submodules/libgit2)
# MESSAGE("Build libgit2: ${CMAKE_CURRENT_SOURCE_DIR}/${libgit2_DIR}")
# EXTERNALPROJECT_ADD(
	# libgit2
	# SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/${libgit2_DIR}
	# PREFIX ${CMAKE_CURRENT_BINARY_DIR}/${libgit2_DIR}
	# BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/${libgit2_DIR}
	# CMAKE_ARGS "-DBUILD_CLAR=OFF" "-DSTDCALL=OFF" "-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}"
	# INSTALL_COMMAND ""
# )
# INCLUDE_DIRECTORIES(${libgit2_DIR}/include)
# EXTERNALPROJECT_GET_PROPERTY(libgit2 BINARY_DIR)
# LINK_DIRECTORIES(${BINARY_DIR}/Debug)
# SET(DEPENDANCY_LIBS ${DEPENDANCY_LIBS} git2)
# # TODO This is NOT platform independant
# EXTERNALPROJECT_ADD_STEP(
	# libgit2
	# copy_outputs
	# COMMAND ${CMAKE_COMMAND} -E copy ${BINARY_DIR}/Debug/git2.dll ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/Debug/git2.dll
# )

# -------- Qt --------
FIND_PACKAGE(Qt4 REQUIRED)
INCLUDE(${QT_USE_FILE})
ADD_DEFINITIONS(${QT_DEFINITIONS})
SET(DEPENDANCY_LIBS ${DEPENDANCY_LIBS} ${QT_LIBRARIES} ${QT_QTMAIN_LIBRARY})

# Include output directories for autogenerated files (version number, Qt, etc)
INCLUDE_DIRECTORIES("${PROJECT_BINARY_DIR}")
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

# -------- Sources & resources --------
SET(gitfu_SOURCES 
	main.cpp 
	gitfu.cpp
	repository/repository.cpp
	repository/tree.cpp
	)
SET(gitfu_HEADERS 
	gitfu.h
	)
SET(gitfu_UI 
	gitfu.ui
	)
SET(gitfu_RESOURCES 
	gitfu.qrc
	)

# -------- More Qt setup --------
QT4_WRAP_CPP(gitfu_HEADERS_MOC ${gitfu_HEADERS})
QT4_WRAP_UI(gitfu_UI_HEADERS ${gitfu_UI})
QT4_ADD_RESOURCES(gitfu_RESOURCES_RCC ${gitfu_RESOURCES})

# -------- git-fu exe --------
ADD_EXECUTABLE(git-fu
	WIN32 # Get rid of the console for Win32. This is ignored on all other platforms
	${gitfu_SOURCES} 
	${gitfu_HEADERS_MOC}
	${gitfu_UI_HEADERS}
	${gitfu_RESOURCES_RCC}
	)
TARGET_LINK_LIBRARIES(git-fu ${DEPENDANCY_LIBS})
ADD_DEPENDENCIES(git-fu libgit2)

# -------- install --------
#TODO: http://www.cmake.org/cmake/help/cmake_tutorial.html
# INCLUDE(InstallRequiredSystemLibraries)
# SET(CPACK_PACKAGE_NAME ${PROJECT_NAME})
# SET(CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME}-${gitfu_VERSION_STRING}")
# SET(CPACK_PACKAGE_VERSION_MAJOR "${gitfu_VERSION_MAJOR}")
# SET(CPACK_PACKAGE_VERSION_MINOR "${gitfu_VERSION_MINOR}")
# SET(CPACK_PACKAGE_VERSION "${gitfu_VERSION_STRING}")
# SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/License.txt")
# SET(CPACK_PACKAGE_CONTACT "Nick Mayer <nick@lastacorn.com>")
# SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Git graphical user interface")
# INCLUDE(CPack)
# INSTALL(TARGETS git-fu DESTINATION bin)
# INSTALL(FILES "${PROJECT_BINARY_DIR}/gitfu-version.h" DESTINATION include)